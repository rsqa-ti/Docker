- FROM node:20.10.0-alpine - referencia a imagem que será utilizada e a versão. Nesse caso está sendo utilizado 
uma aplicação node versão 20.10.0 e o alpine é uma versão bem mais leve da aplicação.
- COPY - server.js /opt/app-nodejs/- copia um arquivo para a aplicação no momento que a imagem está sendo 
criada através do FROM e passamos a diretório onde o arquivo será copiado.
- CMD comando como se estivéssimos no terminal do linux
WORKDIR - diretório onde estamos trabalhando na imagem, por exemplo, podemos criar um WORKDIR com o diretório
/opt/app-nodejs, assim ele saberá desse comando para baixo que tudo estará trabalhando nesse diretório.
- RUN - executa o comando shell na criação da imaegem, por exemplo, podemos instalar pacotes e programas no
sistema operacional que estamos utilizando para o container.
- LABEL: Adição de metadados à imagem, ou seja informações complementares que vão descrever amigavelmente 
algum detalhe sobre a imagem. Dentro do docker inspect <image ID>, temos um campo LABEL.
- ENV - cria variáveis de ambiente
- ARG - define argumentos que podem ser encaminhados no build da imagem
- A diferença entre o ARG e o ENV é que um (ARG) é inserido no Dockerfile e posteriormente devemos insserir
o valor padrão no momento do buid e o ENV é inserido no próprio Dockerfile o valor padrão. E no caso de 2
valores diferentes entre o ARG e o ENV, o valor do ENV irá sobrepor o valor de ARG
- USER - define o usuário responsável pela execução dos comandos no SO.
- CMD - comando executado sobre a imagem quando o container é iniciado. A instruição do CMD pode sesr passada
no build da imagem, quando isso ocorrer o CMD do build se sobrepõe ao do Dockerfile.