- FROM node:20.10.0-alpine - referencia a imagem que será utilizada e a versão. Nesse caso está sendo utilizado 
uma aplicação node versão 20.10.0 e o alpine é uma versão bem mais leve da aplicação.
- COPY - server.js /opt/app-nodejs/- copia um arquivo para a aplicação no momento que a imagem está sendo 
criada através do FROM e passamos a diretório onde o arquivo será copiado.
- CMD comando como se estivéssimos no terminal do linux
WORKDIR - diretório onde estamos trabalhando na imagem, por exemplo, podemos criar um WORKDIR com o diretório
/opt/app-nodejs, assim ele saberá desse comando para baixo que tudo estará trabalhando nesse diretório.
- RUN - executa o comando shell na criação da imaegem, por exemplo, podemos instalar pacotes e programas no
sistema operacional que estamos utilizando para o container.
- LABEL: Adição de metadados à imagem, ou seja informações complementares que vão descrever amigavelmente 
algum detalhe sobre a imagem. Dentro do docker inspect <image ID>, temos um campo LABEL.
- ENV - cria variáveis de ambiente
- ARG - define argumentos que podem ser encaminhados no build da imagem
- A diferença entre o ARG e o ENV é que um (ARG) é inserido no Dockerfile e posteriormente devemos insserir
o valor padrão no momento do buid e o ENV é inserido no próprio Dockerfile o valor padrão. E no caso de 2
valores diferentes entre o ARG e o ENV, o valor do ENV irá sobrepor o valor de ARG
- USER - define o usuário responsável pela execução dos comandos no SO.
- CMD - comando executado sobre a imagem quando o container é iniciado. A instruição do CMD pode sesr passada
no build da imagem, quando isso ocorrer o CMD do build se sobrepõe ao do Dockerfile.
- ADD - copia arquivos de uma determinada origem do HOST para determinados destinos no container.
--ADD <origem> <destino>. O comando ADD pode ser utilizado para baixar um arquivo da internet através de uma URL
- COPY - copia arquivos de uma determinada origem para deterinados destinos na Imagem.
- ENTRYPOINT - define o processo (serviço) executado dentro do container. É utilizada juntamente com o 
comando CMD.
- WORKDIR - define o diretório padrão para as instuções RUN, CMD, ADD, COPY e ou ENTRYPOINT
- EXPOSE - documenta quais portas deverão ser expostas em tempo de execução do container.
- VOLUME - cria unidades persistentes de dados
- Alguns comandos podem ser utilizados quantas vezes forem necessários no Dockerfile:
--FROM, RUN, ADD, COPY, WORKDIR, VOLUME, LABEL, ENV, ARG, USER e EXPOSE
- Outras podem ser utilizadas somente uma vez:
--CMD, ENTRYPOINT
- No dockerfile, temos comandos para a criação dos containers, esses comandos são tidos como somente leitura
pois não são modificados quando alteramos algo no container. Já os comandos do container são de gravação,
ou seja, alteram o estado inicial da imagem, mas o dockerfile não é alterado, somente o container.